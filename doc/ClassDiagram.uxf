<?xml version="1.0" encoding="UTF-8"?><diagram program="umlet" version="11.3">
  <help_text>A</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>660</x>
      <y>0</y>
      <w>330</w>
      <h>450</h>
    </coordinates>
    <panel_attributes>*Model::Model*
--
+ Model()
+ startSimulation()
+ pauseSimulation()
+ stopSimulation()
+ getSnapshot() : ObjectsSnapshot
+ getMapSnapshot() : MapSnapshot
+ setSimulationSpeed(factor : double)
+ getSimulationSpeed() : double

- operator()
- setMinTimerDelay(delayInMs : uint)
- getMinTimerDelay() : uint
--
- currentState : World
- simulationParts : std::list&lt;SimulationPart&gt;
- simulationSpeed : double
- key : World::MasterKey
- minTimerDelay : uint


_- msPerTick : const double_
--
--
_Description:_
Access class to the model of application.
It allows to controll model simulation 
flow as well as getting informations 
about current model state.
Internally it starts simulation thread
and handle it flow in self operator().</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>510</x>
      <y>780</y>
      <w>470</w>
      <h>440</h>
    </coordinates>
    <panel_attributes>*Model::World*
--
{innerclass
*Model::World::MasterKey*
{friend  of  Model::Model}
--
- MasterKey()
innerclass}
{innerclass
*ObjectsSnapshots*
/{typedef std::list&lt;ObjectSnapshotPtr&gt;}/
innerclass}
--
+ World()

/+ timePassed(ms : uint)/
+ getObjectsSnapshot(key : MasterKey) const : ObjectSnapshots
+ getMapSnapshot(key : MasterKey) const : MapSnapshot
+ visit(observer : CarObserver*)
+ visit(observer : PedestrianObserver*)
+ visit(observer : SensorObserver*)

--
- placedObjects : std::map&lt;Object*, Position&gt;
- observers : std::list&lt;Observers*&gt;
- worldMap : Map


--
--
_Description:_
It keeps information about map and objects on this map.
It knows all active objects in the world (Observers) and informs
them about what they see using visitior Pattern.
It is capabale of creating and providing snapshot of current
map state as well as objects on this map using classes desinged
for this puropose.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>600</x>
      <y>420</y>
      <w>192</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
*             is part of*</panel_attributes>
    <additional_attributes>100;30;100;360</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>1040</x>
      <y>780</y>
      <w>330</w>
      <h>350</h>
    </coordinates>
    <panel_attributes>*Model::ObjectManager*
--
+ ObjectManager(world : World)
/+ timePassed(ms : uint)/
--
- world : World&amp;
--
--
_Description:_
It knows all types of objects in the world and
is responsible for creating them, registering
them in World as observer or as object, as 
well as for deliting those objects when the 
time comes.
In general it can take action any time tick
making decision if it should create any object
or not.
This class is only responsible for dynamic
objects, static objects available from DB such
as sesnsors or building will be initialized
directly in World constructor using 
DBAccessor.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>950</x>
      <y>910</y>
      <w>110</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>90;30;30;30</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>860</x>
      <y>530</y>
      <w>210</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
*Model::SimulationPart*
--
/+ timePassed(ms : uint) = 0/
--
--
This interface describes part
of simulation that can be
registered in Model and 
will be informend about 
every consecutive tick.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>930</x>
      <y>420</y>
      <w>50</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m1=   1
m2=   n</panel_attributes>
    <additional_attributes>30;30;30;110</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>720</x>
      <y>660</y>
      <w>180</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
Implements</panel_attributes>
    <additional_attributes>160;30;30;120</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>1020</x>
      <y>660</y>
      <w>210</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
Implements</panel_attributes>
    <additional_attributes>30;30;190;120</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>500</x>
      <y>1260</y>
      <w>370</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>&lt;&lt;abstract&gt;&gt;
*Model::Observer*
--
/+ accept(world : World&amp;) = 0/
+ provideObjects(objects : ObjectSnapshots)
+ provideMap(map : MapSnapshot)
+ hasMapProvided() : bool
--
# map : MapSnapshot
# objects : ObjectsSnapshot
--
--
_Description:_
This is class that will get informations about 
current world state from its own perspective.
Every class derived directly form this should 
be well known to World as it will be visited by it.
Those classes can be reused to implement new 
LiveObjects having same parameters of viewing as
old ones which should be enought in most cases.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>180</x>
      <y>1790</y>
      <w>250</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*Model::CarObserver*
--
/+ accept(world : World&amp;)/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>940</x>
      <y>1260</y>
      <w>340</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
*Model::Object*
--
/+ getSnapshot() : ObjectSnapshotPtr = 0/
/+ getCurrentMass() : double = 0/
/+ getCurrentForceVector() : Vector3 = 0/
--
_Description:_
This is class describing placeable object.
It keeps infotmations about itself and
must be capable of creating own snapshot.
Have to provide information about own mass
and force (maybe other phisical informations
like ground connection area).</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>630</x>
      <y>1190</y>
      <w>50</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;30;70</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>500</x>
      <y>1580</y>
      <w>290</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>*Model::LiveObjectObserver*
--
/+ getConnectedObject() : const Object*/
--
--
_Description:_
Sees things nearby object
connected with it (one returned
from getConnectedObject()).</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>780</x>
      <y>1790</y>
      <w>250</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*Model::SensorObserver*
--
/+ accept(world : World&amp;)/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>480</x>
      <y>1790</y>
      <w>250</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*Model::PedestrianObserver*
--
/+ accept(world : World&amp;)/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>270</x>
      <y>1670</y>
      <w>290</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>270;30;30;120</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>560</x>
      <y>1520</y>
      <w>50</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;30;60</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>680</x>
      <y>1670</y>
      <w>250</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;230;120</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>580</x>
      <y>1670</y>
      <w>50</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;30;120</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>920</x>
      <y>1570</y>
      <w>280</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
*Model::LiveObject*
--
_Description:_
This is class describing object that
can react for world it sees by itself.
It connects functionality of Object
which is phisical representation of
something in the world with Observer
which is something that is informed
about at least part of world state.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>920</x>
      <y>1190</y>
      <w>110</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;90;70</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>1220</x>
      <y>1570</y>
      <w>280</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>*Model::Building*
--
/+ getSnapshot() : ObjectSnapshotPtr/
/+ getCurrentMass() : double/
/+ getCurrentForceVector() : Vector3/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>760</x>
      <y>1590</y>
      <w>180</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
virtual</panel_attributes>
    <additional_attributes>30;50;160;50</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>1030</x>
      <y>1470</y>
      <w>50</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;30;100</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>1210</x>
      <y>1470</y>
      <w>50</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;30;100</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>180</x>
      <y>1900</y>
      <w>280</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>*Model::Car*
--
/+ getSnapshot() : ObjectSnapshotPtr/
/+ getCurrentMass() : double/
/+ getCurrentForceVector() : Vector3/
--
#mass : double
#currentForce : Vector3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>260</x>
      <y>1810</y>
      <w>50</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;30;90</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>420</x>
      <y>1720</y>
      <w>650</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>630;30;630;140;30;140;30;180</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>920</x>
      <y>1810</y>
      <w>50</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;30;90</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>580</x>
      <y>1810</y>
      <w>50</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;30;90</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>720</x>
      <y>1720</y>
      <w>370</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>350;30;350;160;30;160;30;180</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>1060</x>
      <y>1720</y>
      <w>50</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;30;180</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>830</x>
      <y>1900</y>
      <w>300</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>*Model::Sensor*
--
/+ getSnapshot() : ObjectSnapshotPtr/
/+ getCurrentMass() : double/
/+ getCurrentForceVector() : Vector3/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>490</x>
      <y>1900</y>
      <w>280</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>*Model::Pedestrian*
--
/+ getSnapshot() : ObjectSnapshotPtr/
/+ getCurrentMass() : double/
/+ getCurrentForceVector() : Vector3/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>130</x>
      <y>1260</y>
      <w>300</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>*Model::Map*
--
-id: Long {composite}
_-ClassAttribute: Long_
--
#Operation(i: int): int
/+AbstractOperation()/
--
--
_Description:_
This class describes map as graph
where roads are edges and crossings
are vertexes.
It is capeable of creating map snapshots.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>400</x>
      <y>1190</y>
      <w>170</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>150;30;30;70</additional_attributes>
  </element>
</diagram>
